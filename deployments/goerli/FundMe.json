{
  "address": "0x5D06a69b4128983D776e78553Cd3128Ad87f630A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAdr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe_NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x522585a7b30fbc4119983803b0a72f16ebc5ef0444bcc48b2d32e7b7464b5b87",
  "receipt": {
    "to": null,
    "from": "0x5aAe65fe39d4BEd9AE052D468F5D3c21fde8fC99",
    "contractAddress": "0x5D06a69b4128983D776e78553Cd3128Ad87f630A",
    "transactionIndex": 11,
    "gasUsed": "911853",
    "logsBloom": "0x
    "blockHash": "0xaddefb6df974f51e22b69a576a00f9bfb49a0cd3b2a32c8ab1a175b025a47094",
    "transactionHash": "0x522585a7b30fbc4119983803b0a72f16ebc5ef0444bcc48b2d32e7b7464b5b87",
    "logs": [],
    "blockNumber": 9485049,
    "cumulativeGasUsed": "5847421",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x44390589104C9164407A0E0562a9DBe6C24A0E05"
  ],
  "numDeployments": 4,
  "solcInputHash": "f98c25bbddf385c3dc658b6534d4a67a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAdr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe_NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Djamli Ali B Bakar\",\"custom:experimental\":\"This is an experimental contract.\",\"details\":\"This implements price feed as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"The Alexandr N. Tetearing algorithm could increase precision\"}},\"title\":\"A contract for crowdfunding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo a simple fundMe contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"//Get Fund from users\\n//Withdraw\\n//Set a minimum funding value in USD\\n// SPDX-License-Identifier: MIT\\n//pragma\\npragma solidity ^0.8.18;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n//import\\nimport \\\"./PriceConverter.sol\\\";\\n\\n//Error Codes\\nerror FundMe_NotOwner();\\n\\n//Interfaces, libraries, Contracts\\n\\n// Ticker and try to pinpoint exactly what's going on (15mn)\\n// Google the exact error\\n// Go to our github repo discussion and/or updates\\n// Ask a question on a forum like Stack Exchange ETH and Stack overflow\\n\\n/// @title A contract for crowdfunding\\n/// @author Djamli Ali B Bakar\\n/// @notice This contract is to demo a simple fundMe contract\\n/// @dev This implements price feed as our library\\n/// @custom:experimental This is an experimental contract.\\ncontract FundMe {\\n     //Type declaration\\n     using PriceConverter for uint256;\\n     // 931,261\\n     // 809 792\\n\\n     //States variables\\n     uint256 public constant MINIMUM_USD = 50 * 1e18;\\n     address[] public funders;\\n     mapping(address => uint256) public addressToAmountFunded;\\n     address private immutable i_owner;\\n\\n     AggregatorV3Interface public priceFeed;\\n\\n     //modifiers\\n     modifier onlyOwner() {\\n          //require(msg.sender==i_owner,\\\"Not the owner\\\");\\n          if (msg.sender != i_owner) {\\n               revert FundMe_NotOwner();\\n          }\\n          _;\\n     }\\n\\n     //functions\\n     //  constructor\\n     //  receive function (if exists)\\n     //  fallback function (if exists)\\n     //  external\\n     //  public\\n     //  internal\\n     //  private\\n\\n     constructor(address priceFeedAdr) {\\n          i_owner = msg.sender;\\n          priceFeed = AggregatorV3Interface(priceFeedAdr);\\n     }\\n\\n     receive() external payable {\\n          fund();\\n     }\\n\\n     fallback() external payable {\\n          fund();\\n     }\\n\\n     /// @notice This function funds this contract\\n     /// @dev The Alexandr N. Tetearing algorithm could increase precision\\n     function fund() public payable {\\n          //Want to be able to set a minimum ount in USD\\n          require(\\n               msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\n               \\\"Did not send enough!\\\"\\n          );\\n\\n          addressToAmountFunded[msg.sender] += msg.value;\\n          funders.push(msg.sender);\\n     }\\n\\n     function withdraw() public onlyOwner {\\n          for (\\n               uint256 funderIndex = 0;\\n               funderIndex < funders.length;\\n               funderIndex++\\n          ) {\\n               address funder = funders[funderIndex];\\n               addressToAmountFunded[funder] = 0;\\n          }\\n          //reset the array\\n          funders = new address[](0);\\n\\n          //transfer\\n          //payable(msg.sender).transfer(address(this).balance);\\n          //send\\n          //bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n          //require(sendSuccess,\\\"Send failed\\\");\\n          //call\\n          (bool callSuccess, ) = payable(msg.sender).call{\\n               value: address(this).balance\\n          }(\\\"\\\");\\n          require(callSuccess, \\\"Call failed\\\");\\n     }\\n\\n     function getPriceFeed() public view returns (AggregatorV3Interface) {\\n          return priceFeed;\\n     }\\n\\n     function getFunder(uint256 index) public view returns (address) {\\n          return funders[index];\\n     }\\n\\n     function getAddressToAmountFunded(\\n          address fundingAddress\\n     ) public view returns (uint256) {\\n          return addressToAmountFunded[fundingAddress];\\n     }\\n\\n     function getOwner() public view returns (address) {\\n          return i_owner;\\n     }\\n}\\n\",\"keccak256\":\"0xb3a869d2f9a9edfe80b3ab96852a434888a7717961982c5569ef9f9d16d2d373\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n     function getPrice(\\n          AggregatorV3Interface priceFeed\\n     ) internal view returns (uint256) {\\n          //ABI\\n          //Address: 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e (ETH/USD)\\n          (, int256 price, , , ) = priceFeed.latestRoundData();\\n          return uint256(price * 1e10);\\n     }\\n\\n     function getVersion(\\n          AggregatorV3Interface priceFeed\\n     ) internal view returns (uint256) {\\n          return priceFeed.version();\\n     }\\n\\n     function getConversionRate(\\n          uint256 ethAmount,\\n          AggregatorV3Interface priceFeed\\n     ) internal view returns (uint256) {\\n          uint256 ethPrice = getPrice(priceFeed);\\n          uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n          return ethAmountInUsd;\\n     }\\n\\n     function getRandom() internal view returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x2f56a26f9c0bce0811c6339fa2295b2e385ce4c58a6fcea27a06016ab60a5523\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100955760003560e01c8063893d20e811610059578063893d20e8146101955780639e87a5cd146101c0578063b60d4288146101eb578063d7b4750c146101f5578063dc0d3dff14610232576100a4565b80630343fb25146100ae5780633ccfd60b146100eb5780633e47d6f3146101025780636b69a5921461013f578063741bef1a1461016a576100a4565b366100a4576100a261026f565b005b6100ac61026f565b005b3480156100ba57600080fd5b506100d560048036038101906100d0919061092d565b6103aa565b6040516100e29190610973565b60405180910390f35b3480156100f757600080fd5b506101006103f3565b005b34801561010e57600080fd5b506101296004803603810190610124919061092d565b610633565b6040516101369190610973565b60405180910390f35b34801561014b57600080fd5b5061015461064b565b6040516101619190610973565b60405180910390f35b34801561017657600080fd5b5061017f610658565b60405161018c91906109ed565b60405180910390f35b3480156101a157600080fd5b506101aa61067e565b6040516101b79190610a17565b60405180910390f35b3480156101cc57600080fd5b506101d56106a6565b6040516101e291906109ed565b60405180910390f35b6101f361026f565b005b34801561020157600080fd5b5061021c60048036038101906102179190610a5e565b6106d0565b6040516102299190610a17565b60405180910390f35b34801561023e57600080fd5b5061025960048036038101906102549190610a5e565b610717565b6040516102669190610a17565b60405180910390f35b6802b5e3af16b18800006102ae600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461075690919063ffffffff16565b10156102ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e690610ae8565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461033e9190610b37565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610478576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561052357600080828154811061049d5761049c610b6b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061051b90610b9a565b91505061047b565b50600067ffffffffffffffff81111561053f5761053e610be2565b5b60405190808252806020026020018201604052801561056d5781602001602082028036833780820191505090505b5060009080519060200190610583929190610823565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105aa90610c42565b60006040518083038185875af1925050503d80600081146105e7576040519150601f19603f3d011682016040523d82523d6000602084013e6105ec565b606091505b5050905080610630576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062790610ca3565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008082815481106106e5576106e4610b6b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000818154811061072757600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061076283610792565b90506000670de0b6b3a7640000858361077b9190610cc3565b6107859190610d34565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156107e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108049190610df2565b5050509150506402540be4008161081b9190610e6d565b915050919050565b82805482825590600052602060002090810192821561089c579160200282015b8281111561089b5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610843565b5b5090506108a991906108ad565b5090565b5b808211156108c65760008160009055506001016108ae565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108fa826108cf565b9050919050565b61090a816108ef565b811461091557600080fd5b50565b60008135905061092781610901565b92915050565b600060208284031215610943576109426108ca565b5b600061095184828501610918565b91505092915050565b6000819050919050565b61096d8161095a565b82525050565b60006020820190506109886000830184610964565b92915050565b6000819050919050565b60006109b36109ae6109a9846108cf565b61098e565b6108cf565b9050919050565b60006109c582610998565b9050919050565b60006109d7826109ba565b9050919050565b6109e7816109cc565b82525050565b6000602082019050610a0260008301846109de565b92915050565b610a11816108ef565b82525050565b6000602082019050610a2c6000830184610a08565b92915050565b610a3b8161095a565b8114610a4657600080fd5b50565b600081359050610a5881610a32565b92915050565b600060208284031215610a7457610a736108ca565b5b6000610a8284828501610a49565b91505092915050565b600082825260208201905092915050565b7f446964206e6f742073656e6420656e6f75676821000000000000000000000000600082015250565b6000610ad2601483610a8b565b9150610add82610a9c565b602082019050919050565b60006020820190508181036000830152610b0181610ac5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b428261095a565b9150610b4d8361095a565b9250828201905080821115610b6557610b64610b08565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610ba58261095a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610bd757610bd6610b08565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610c2c600083610c11565b9150610c3782610c1c565b600082019050919050565b6000610c4d82610c1f565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610c8d600b83610a8b565b9150610c9882610c57565b602082019050919050565b60006020820190508181036000830152610cbc81610c80565b9050919050565b6000610cce8261095a565b9150610cd98361095a565b9250828202610ce78161095a565b91508282048414831517610cfe57610cfd610b08565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610d3f8261095a565b9150610d4a8361095a565b925082610d5a57610d59610d05565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610d8481610d65565b8114610d8f57600080fd5b50565b600081519050610da181610d7b565b92915050565b6000819050919050565b610dba81610da7565b8114610dc557600080fd5b50565b600081519050610dd781610db1565b92915050565b600081519050610dec81610a32565b92915050565b600080600080600060a08688031215610e0e57610e0d6108ca565b5b6000610e1c88828901610d92565b9550506020610e2d88828901610dc8565b9450506040610e3e88828901610ddd565b9350506060610e4f88828901610ddd565b9250506080610e6088828901610d92565b9150509295509295909350565b6000610e7882610da7565b9150610e8383610da7565b9250828202610e9181610da7565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610ec957610ec8610b08565b5b8282058414831517610ede57610edd610b08565b5b509291505056fea2646970667358221220e7e43cb8f16b425f80be17d26d6753da152b9deefb54fe27ffbfc6e39538ed7364736f6c63430008120033",
  "devdoc": {
    "author": "Djamli Ali B Bakar",
    "custom:experimental": "This is an experimental contract.",
    "details": "This implements price feed as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "The Alexandr N. Tetearing algorithm could increase precision"
      }
    },
    "title": "A contract for crowdfunding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "This contract is to demo a simple fundMe contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 63,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 67,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 72,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}