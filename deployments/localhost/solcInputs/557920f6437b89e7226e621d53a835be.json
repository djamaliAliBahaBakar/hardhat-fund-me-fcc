{
     "language": "Solidity",
     "sources": {
          "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
               "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
          },
          "contracts/FundMe.sol": {
               "content": "//Get Fund from users\n//Withdraw \n//Set a minimum funding value in USD\n// SPDX-License-Identifier: MIT\n//pragma\npragma solidity ^0.8.18;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n//import\nimport \"./PriceConverter.sol\";\n\n//Error Codes\nerror FundMe_NotOwner();\n\n//Interfaces, libraries, Contracts\n\n// Ticker and try to pinpoint exactly what's going on (15mn)\n// Google the exact error\n// Go to our github repo discussion and/or updates\n// Ask a question on a forum like Stack Exchange ETH and Stack overflow\n\n/// @title A contract for crowdfunding\n/// @author Djamli Ali B Bakar\n/// @notice This contract is to demo a simple fundMe contract\n/// @dev This implements price feed as our library\n/// @custom:experimental This is an experimental contract.\ncontract FundMe {\n    //Type declaration\n    using PriceConverter for uint256;\n    // 931,261\n    // 809 792\n\n    //States variables\n    uint256 public constant  MINIMUM_USD = 50*1e18;\n    address[] private funders;\n    mapping(address => uint256) public addressToAmountFunded;\n    address private immutable i_owner;\n\n    AggregatorV3Interface public priceFeed;\n\n    //modifiers\n    modifier onlyOwner() {\n        //require(msg.sender==i_owner,\"Not the owner\");\n        if (msg.sender != i_owner) {\n            revert FundMe_NotOwner();\n        }\n        _;\n    }\n\n    //functions\n    //  constructor\n    //  receive function (if exists)\n    //  fallback function (if exists)\n    //  external\n    //  public\n    //  internal\n    //  private\n\n\n    constructor(address priceFeedAdr) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAdr);\n    }\n    \n    receive() external payable  {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    /// @notice This function funds this contract\n    /// @dev The Alexandr N. Tetearing algorithm could increase precision\n    function fund() public payable {\n        \n        //Want to be able to set a minimum ount in USD\n        require(msg.value.getConversionRate(priceFeed) >= MINIMUM_USD, \"Did not send enough!\");\n        \n        addressToAmountFunded[msg.sender] += msg.value;\n        funders.push(msg.sender);\n\n    }\n   \n\n    function withdraw() public onlyOwner {\n        \n        for (uint256 funderIndex =0; funderIndex < funders.length;funderIndex++) {\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n        //reset the array\n        funders = new address[](0);\n\n        //transfer\n        //payable(msg.sender).transfer(address(this).balance);\n        //send\n        //bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        //require(sendSuccess,\"Send failed\");\n        //call\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(callSuccess,\"Call failed\");\n    }\n\n\n        \n\n    \n\n     function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return priceFeed;\n    }\n\n    function getFunder(uint256 index) public view returns (address) {\n        return funders[index];\n    }\n\n    function getAddressToAmountFunded(address fundingAddress)\n        public\n        view\n        returns (uint256)\n    {\n        return addressToAmountFunded[fundingAddress];\n    } \n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n}"
          },
          "contracts/PriceConverter.sol": {
               "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.18;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256) {\n        //ABI\n        //Address: 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e (ETH/USD)\n             (,int256 price,,,) = priceFeed.latestRoundData();\n        return uint256(price * 1e10);\n    }\n\n    function getVersion(AggregatorV3Interface priceFeed) internal view returns (uint256) {\n          return priceFeed.version();\n    }\n\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUsd;\n    }\n\n    function getRandom() internal view returns(uint256) {\n        \n    }\n}\n"
          }
     },
     "settings": {
          "optimizer": {
               "enabled": false,
               "runs": 200
          },
          "outputSelection": {
               "*": {
                    "*": [
                         "abi",
                         "evm.bytecode",
                         "evm.deployedBytecode",
                         "evm.methodIdentifiers",
                         "metadata",
                         "devdoc",
                         "userdoc",
                         "storageLayout",
                         "evm.gasEstimates"
                    ],
                    "": ["ast"]
               }
          },
          "metadata": {
               "useLiteralContent": true
          }
     }
}
